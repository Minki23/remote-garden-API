services:
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    ports:
      - "1884:1883"  # MQTT
    volumes:
      - ./app/utils/mock_mqtt/mqtt_config:/mosquitto/config
    restart: unless-stopped

  app:
    build: .
    container_name: remote-garden-api
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"
      HASH_SALT: "s0m3S3cr3tSalt"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID:-your-google-client-id}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}"
      RTSP_URL: "rtsp://cam.local:8554/live"
      USE_MOCK_CAMERA: "0"
    ports:
      - "3000:3000"
    depends_on:
      - db
    extra_hosts:
      - "cam.local:172.30.59.180" # change on zerotier one if needed
    # devices:
    #   - "/dev/video0:/dev/video0" # change if want mock and camera is available on different path
  db:
    image: postgres:15
    container_name: remote-garden-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: garden
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5000:5432"

  redis:
    image: redis:6.2-alpine
    container_name: remote-garden-redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  celery:
    build: .
    container_name: celery-worker
    command: celery -A app.core.celery.celery_app worker --loglevel=info -E
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your-google-client-id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}

  scheduler:
    build: .
    container_name: celery-scheduler
    command: celery -A app.core.celery.celery_app beat --scheduler redbeat.RedBeatScheduler --loglevel=info
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDBEAT_REDIS_URL=redis://redis:6379/0
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your-google-client-id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}
      
  flower:
    build: .
    container_name: flower
    command: celery -A app.core.celery.celery_app flower --loglevel=info --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  admin-panel:
    build:
      context: .
      dockerfile: admin_app/Dockerfile
    container_name: remote-garden-api-admin-panel
    ports:
      - "8001:8001"
    depends_on:
      - db
    volumes:
      - ./admin_app:/admin_app
      - ./app:/admin_app/app
    environment:
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"

  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
    container_name: remote-garden-migration
    depends_on:
      - db
    volumes:
      - ./:/app
    environment:
      DB_CONNECTION_STRING: "postgresql+psycopg2://user:password@db:5432/garden"
    entrypoint: ["./app/utils/scripts/migration_manager.sh"]
    command: ["-c", "sleep infinity"]
    profiles:
      - manual

  format:
    build:
      context: .
      dockerfile: Dockerfile.format
    container_name: remote-garden-format
    volumes:
      - ./app:/app
    entrypoint: ["./utils/scripts/format.sh"]
    profiles:
      - manual

  compile-lock:
    build:
      context: .
      dockerfile: Dockerfile.compilereq
    container_name: remote-garden-compile-lock
    volumes:
      - ./uv.lock:/app/uv.lock
      - ./pyproject.toml:/app/pyproject.toml:ro
    profiles:
      - manual

  mock-data:
    build: .
    container_name: remote-garden-mock-data
    command: ["python", "-m", "app.utils.scripts.mock_data"]
    depends_on:
      - db
    environment:
      PYTHONPATH: /app
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"
    volumes:
      - ./:/app
    profiles:
      - manual

  mqtt-mock-publisher:
    build: .
    container_name: mqtt-mock-publisher
    command: ["python", "-m", "app.utils.mock_mqtt.mock_device_publisher"]
    depends_on:
      - mqtt-broker
    environment:
      PYTHONPATH: /app
    volumes:
      - ./:/app
    profiles:
      - manual


volumes:
  postgres_data:
