services:
  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: mqtt-broker
    restart: unless-stopped
    ports:
      - "8883:8883"
    volumes:
      - ./mqtt-server/mosquitto/config:/mosquitto/config
      - ./mqtt-server/mosquitto/certs:/mosquitto/certs
      - ./mqtt-server/mosquitto/data:/mosquitto/data
      - ./mqtt-server/mosquitto/log:/mosquitto/log
    environment:
      - TZ=Europe/Warsaw
    user: "1883:1883"
    networks:
      - garden-net
    profiles: [ "prod" ]

  app:
    build: .
    container_name: remote-garden-api
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"
      HASH_SALT: "s0m3S3cr3tSalt"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID:-your-google-client-id}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}"
    ports:
      - "3000:3000"
    depends_on:
      - db
    volumes:
      - ./mqtt-server/backend/backend.crt:/app/ca/backend.crt:ro
      - ./mqtt-server/backend/backend.key:/app/ca/backend.key:ro
      - ./mqtt-server/certs/ca.crt:/app/ca/ca.crt:ro
      - ./firebase-service-account.json:/app/firebase-service-account.json:ro
    networks:
      - garden-net
    profiles: [ "prod" ]

  csr-signer:
    build:
      context: ./csr-signer
    container_name: csr-signer
    restart: unless-stopped
    volumes:
      - ./mqtt-server/private/ca.key:/app/ca/ca.key:ro
      - ./mqtt-server/certs/ca.crt:/app/ca/ca.crt:ro
    environment:
      - TZ=Europe/Warsaw
    networks:
      - garden-net
    profiles: [ "prod" ]

  db:
    image: postgres:15
    container_name: remote-garden-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: garden
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5000:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d garden" ]
      interval: 5s
      retries: 5
      timeout: 5s
    networks:
      - garden-net
    profiles: [ "prod" ]

  redis:
    image: redis:6.2-alpine
    container_name: remote-garden-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - garden-net
    profiles: [ "prod" ]

  celery:
    build: .
    container_name: celery-worker
    command: celery -A app.core.celery.celery_app worker --loglevel=info -E
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your-google-client-id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}
    networks:
      - garden-net
    profiles: [ "prod" ]

  scheduler:
    build: .
    container_name: celery-scheduler
    command: celery -A app.core.celery.celery_app beat --scheduler redbeat.RedBeatScheduler --loglevel=info
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDBEAT_REDIS_URL=redis://redis:6379/0
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-your-google-client-id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-your-google-client-secret-id}
    networks:
      - garden-net
    profiles: [ "prod" ]

  flower:
    build: .
    container_name: flower
    command: celery -A app.core.celery.celery_app flower --loglevel=info --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app
      - DB_CONNECTION_STRING=postgresql+asyncpg://user:password@db:5432/garden
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - garden-net
    profiles: [ "prod" ]

  admin-panel:
    build:
      context: .
      dockerfile: admin_app/Dockerfile
    container_name: remote-garden-api-admin-panel
    ports:
      - "8001:8001"
    depends_on:
      - db
    volumes:
      - ./admin_app:/admin_app
      - ./app:/admin_app/app
    environment:
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"
    networks:
      - garden-net
    profiles: [ "prod" ]

  # ================================
  # MOCK SERVICES
  # ================================
  mock-data:
    build: .
    container_name: remote-garden-mock-data
    command: [ "python", "-m", "app.utils.scripts.mock_data" ]
    environment:
      PYTHONPATH: /app
      DB_CONNECTION_STRING: "postgresql+asyncpg://user:password@db:5432/garden"
    volumes:
      - ./:/app
    networks:
      - garden-net
    profiles: [ "mock" ]

  mqtt-mock-publisher:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: mqtt-mock-publisher
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
    volumes:
      - ./mqtt-server/mock-client:/app/certs/mock-client:ro
      - ./mqtt-server/certs:/app/certs/ca:ro
    networks:
      - garden-net
    profiles: [ "mock" ]

  agent:
    build:
      context: .
      dockerfile: agent_app/Dockerfile
    container_name: remote-garden-agent
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - PYTHONPATH=/app/agent_app
    networks:
      - garden-net
    profiles: [ "prod" ]

volumes:
  postgres_data:


networks:
  garden-net:
    name: garden-net
    driver: bridge
